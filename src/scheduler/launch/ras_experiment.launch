<?xml version="1.0"?>
<launch>
    <!-- Can be set as argument during roslaunch -->
    <arg name="use_robot" default="true" />
    <arg name="use_tablet" default="true" />
    <arg name="use_error" default="true" />
    <arg name="use_camera" default="true" />

    <arg name="is_test" default="false" /> <!-- testing error detection -->
    <arg name="test_error" default="false" /> <!-- test only when using dummy data -->
    <arg name="new_map" default="false" />
    <arg name="gui" default="false" />

    <!-- Parameters -->
    <param name="ras/use_robot" value="$(arg use_robot)" type="bool" />
    <param name="ras/use_tablet" value="$(arg use_tablet)" type="bool" />

    <!-- Manager -->
    <node name="manager" pkg="scheduler" type="manager.py" output="screen" />

    <!-- Robot -->
    <group if="$(arg use_robot)">
        <node name="goto" pkg="scheduler" type="goto.py" output="screen" />
        <node name="find_person_server" pkg="find_person" type="find_person_server.py" output="screen" />

        <!-- Navigation -->
        <include file="$(find ras_navigation)/launch/RAS_Navigation.launch">
            <arg name="new_map" value="$(arg new_map)" />
            <arg name="gui" value="$(arg gui)" />
        </include>
    </group>

    <!-- Tablet -->
    <group if="$(arg use_tablet)">
        <include file="$(find tablet_interface)/launch/web.launch" />
    </group>

    <!-- Error detection -->
    <group if="$(arg use_error)">
        <include file="$(find adl_error_detection)/launch/detect_error.launch">
            <arg name="is_test" value="$(arg is_test)" />
        </include>

        <group if="$(arg test_error)">
            <!-- Run one of these afterwards:
                 rosservice call /test_task_controller '{id: {stamp: now, task_number: 2}, request: {status: 2}, file: 2/0002.data}'
                 rosservice call /test_task_controller '{id: {stamp: now, task_number: 0}, request: {status: 2}, file: 0/0002.data}'
                 -->
            <node name="test_error_detector" pkg="adl_error_detection" type="test_error_detector.py" output="screen" />
        </group>
    </group>

    <!-- Camera, object detection, etc. -->
    <group if="$(arg use_camera)">
        <node name="jetson" pkg="scheduler" type="jetson.sh" output="screen" />
    </group>
</launch>
